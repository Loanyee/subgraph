// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class loanHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save loanHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type loanHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("loanHistory", id.toString(), this);
    }
  }

  static load(id: string): loanHistory | null {
    return changetype<loanHistory | null>(store.get("loanHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get borrowAmount(): BigInt {
    let value = this.get("borrowAmount");
    return value!.toBigInt();
  }

  set borrowAmount(value: BigInt) {
    this.set("borrowAmount", Value.fromBigInt(value));
  }

  get interestRate(): i32 {
    let value = this.get("interestRate");
    return value!.toI32();
  }

  set interestRate(value: i32) {
    this.set("interestRate", Value.fromI32(value));
  }

  get paybackMonths(): i32 {
    let value = this.get("paybackMonths");
    return value!.toI32();
  }

  set paybackMonths(value: i32) {
    this.set("paybackMonths", Value.fromI32(value));
  }

  get employer(): Bytes {
    let value = this.get("employer");
    return value!.toBytes();
  }

  set employer(value: Bytes) {
    this.set("employer", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get borrowToken(): Bytes {
    let value = this.get("borrowToken");
    return value!.toBytes();
  }

  set borrowToken(value: Bytes) {
    this.set("borrowToken", Value.fromBytes(value));
  }
}
